import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../cubit/kontragent_cubit.dart';
import '../widgets/kontragent_search_widget.dart';
import '../widgets/kontragent_item_widget.dart';
import '../../../../core/injection/injection_container.dart';
import '../../../../core/usecases/usecase.dart';
import '../../../../core/config/supabase_config.dart';

/// Page for displaying kontragenty
class KontragentPage extends StatelessWidget {
  const KontragentPage({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (context) => sl<KontragentCubit>(),
      child: const _KontragentView(),
    );
  }
}

class _KontragentView extends StatelessWidget {
  const _KontragentView();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∏'),
        actions: [
          IconButton(
            onPressed: () {
              context.read<KontragentCubit>().syncKontragenty();
            },
            icon: const Icon(Icons.sync),
            tooltip: '–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏',
          ),
          IconButton(
            onPressed: () {
              _showClearDataDialog(context, context.read<KontragentCubit>());
            },
            icon: const Icon(Icons.clear_all),
            tooltip: '–û—á–∏—Å—Ç–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ',
          ),
          IconButton(
            onPressed: () {
              _showInfoDialog(context, context.read<KontragentCubit>());
            },
            icon: const Icon(Icons.info),
            tooltip: '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–∞–Ω—ñ',
          ),
        ],
      ),
      body: RefreshIndicator(
        onRefresh: () => context.read<KontragentCubit>().loadRootFolders(),
        child: BlocConsumer<KontragentCubit, KontragentState>(
          listener: (context, state) {
            if (state is KontragentError) {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text(state.message),
                  backgroundColor: Theme.of(context).colorScheme.error,
                ),
              );
            }
          },
          builder: (context, state) {
            if (state is KontragentInitial || state is KontragentLoading) {
              if (state is KontragentInitial) {
                // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ, —è–∫—â–æ –Ω—ñ - —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ
                _checkAndSyncIfNeeded(context);
              }
              return const Center(child: CircularProgressIndicator());
            }

            if (state is KontragentTreeLoaded) {
              return _buildHierarchicalView(context, state.rootFolders);
            }

            if (state is KontragentLoaded) {
              return _buildListView(context, state.kontragenty);
            }

            return const Center(child: Text('–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è'));
          },
        ),
      ),
    );
  }

  Widget _buildHierarchicalView(
    BuildContext context,
    List<dynamic> rootFolders,
  ) {
    return Column(
      children: [
        const KontragentSearchWidget(),
        Expanded(
          child: ListView.builder(
            itemCount: rootFolders.length,
            itemBuilder: (context, index) {
              final folder = rootFolders[index];
              return _FolderNode(
                entity: folder,
                cubit: context.read<KontragentCubit>(),
              );
            },
          ),
        ),
      ],
    );
  }

  Widget _buildListView(BuildContext context, List<dynamic> kontragenty) {
    return Column(
      children: [
        const KontragentSearchWidget(),
        Expanded(
          child: ListView.builder(
            itemCount: kontragenty.length,
            itemBuilder: (context, index) {
              final kontragent = kontragenty[index];
              return KontragentItemWidget(kontragent: kontragent);
            },
          ),
        ),
      ],
    );
  }

  void _checkAndSyncIfNeeded(BuildContext context) async {
    final cubit = context.read<KontragentCubit>();

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
    final countResult = await cubit.getKontragentyCountUseCase(NoParams());

    countResult.fold(
      (failure) {
        // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å, —Å–ø—Ä–æ–±—É—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏
        print('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤, —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ...');
        cubit.syncKontragenty();
      },
      (count) {
        if (count == 0) {
          print('üìä –õ–æ–∫–∞–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î ($count), —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ...');
          cubit.syncKontragenty();
        } else {
          print('üìä –ó–Ω–∞–π–¥–µ–Ω–æ $count –ª–æ–∫–∞–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ...');
          cubit.loadRootFolders();
        }
      },
    );
  }

  void _showClearDataDialog(BuildContext context, KontragentCubit cubit) {
    showDialog(
      context: context,
      builder: (dialogContext) => AlertDialog(
        title: const Text('–û—á–∏—Å—Ç–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ'),
        content: const Text(
          '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ñ–≤?',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(dialogContext),
            child: const Text('–°–∫–∞—Å—É–≤–∞—Ç–∏'),
          ),
          ElevatedButton(
            onPressed: () async {
              Navigator.pop(dialogContext);
              await cubit.clearLocalData();
              await cubit.loadRootFolders();
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('–õ–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ')),
              );
            },
            child: const Text('–û—á–∏—Å—Ç–∏—Ç–∏'),
          ),
        ],
      ),
    );
  }

  void _showInfoDialog(BuildContext context, KontragentCubit cubit) async {
    // –ü–æ–∫–∞–∑—É—î–º–æ –¥—ñ–∞–ª–æ–≥ –∑ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (dialogContext) => const AlertDialog(
        content: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            CircularProgressIndicator(),
            SizedBox(width: 16),
            Text('–û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é...'),
          ],
        ),
      ),
    );

    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤
      final countResult = await cubit.getKontragentyCountUseCase(NoParams());

      // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      Navigator.pop(context);

      countResult.fold(
        (failure) {
          // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É
          showDialog(
            context: context,
            builder: (dialogContext) => AlertDialog(
              title: const Text('–ü–æ–º–∏–ª–∫–∞'),
              content: Text(
                '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é: ${failure.message}',
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(dialogContext),
                  child: const Text('OK'),
                ),
              ],
            ),
          );
        },
        (count) {
          // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
          showDialog(
            context: context,
            builder: (dialogContext) => AlertDialog(
              title: const Text('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–∞–Ω—ñ'),
              content: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text('üìä –õ–æ–∫–∞–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤: $count'),
                  const SizedBox(height: 8),
                  Text('üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: kontragenty.db'),
                  const SizedBox(height: 8),
                  Text('üè∑Ô∏è –¢–∞–±–ª–∏—Ü—è: ${SupabaseConfig.schema}_kontragenty'),
                ],
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(dialogContext),
                  child: const Text('OK'),
                ),
              ],
            ),
          );
        },
      );
    } catch (e) {
      // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      Navigator.pop(context);

      // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É
      showDialog(
        context: context,
        builder: (dialogContext) => AlertDialog(
          title: const Text('–ü–æ–º–∏–ª–∫–∞'),
          content: Text('–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: $e'),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(dialogContext),
              child: const Text('OK'),
            ),
          ],
        ),
      );
    }
  }
}

class _FolderNode extends StatelessWidget {
  const _FolderNode({required this.entity, required this.cubit});
  final dynamic entity;
  final KontragentCubit cubit;

  @override
  Widget build(BuildContext context) {
    if (entity.isFolder) {
      return _LazyExpansionTile(
        title: Text(entity.name),
        leading: const Icon(Icons.folder),
        loadChildren: () => cubit.loadChildren(entity.guid),
        itemBuilder: (context, child) {
          return child.isFolder
              ? _FolderNode(entity: child, cubit: cubit)
              : KontragentItemWidget(kontragent: child);
        },
      );
    }
    return KontragentItemWidget(kontragent: entity);
  }
}

class _LazyExpansionTile extends StatefulWidget {
  const _LazyExpansionTile({
    required this.title,
    required this.leading,
    required this.loadChildren,
    required this.itemBuilder,
  });
  final Widget title;
  final Widget leading;
  final Future<List<dynamic>> Function() loadChildren;
  final Widget Function(BuildContext, dynamic) itemBuilder;

  @override
  State<_LazyExpansionTile> createState() => _LazyExpansionTileState();
}

class _LazyExpansionTileState extends State<_LazyExpansionTile> {
  bool _expanded = false;
  Future<List<dynamic>>? _future;

  @override
  Widget build(BuildContext context) {
    return ExpansionTile(
      leading: widget.leading,
      title: widget.title,
      onExpansionChanged: (v) {
        setState(() => _expanded = v);
        if (v && _future == null) {
          _future = widget.loadChildren();
        }
      },
      children: _expanded
          ? [
              FutureBuilder<List<dynamic>>(
                future: _future,
                builder: (context, snapshot) {
                  if (!snapshot.hasData) {
                    return const Padding(
                      padding: EdgeInsets.all(12.0),
                      child: CircularProgressIndicator(),
                    );
                  }
                  final list = snapshot.data!;
                  return ListView.builder(
                    shrinkWrap: true,
                    physics: const ClampingScrollPhysics(),
                    itemCount: list.length,
                    itemBuilder: (context, index) =>
                        widget.itemBuilder(context, list[index]),
                  );
                },
              ),
            ]
          : const <Widget>[],
    );
  }
}
