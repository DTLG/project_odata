import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import '../../models/kontragent_model.dart';
import '../../../../../core/database/sqlite_helper.dart';
import '../../../../../core/config/supabase_config.dart';
import '../kontragent_local_data_source.dart';

/// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞ –¥–∞–Ω–∏—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ñ–≤ —á–µ—Ä–µ–∑ SQLite
abstract class SqliteKontragentDatasource {
  Future<List<KontragentModel>> getAllKontragenty();
  Future<KontragentModel?> getKontragentByGuid(String guid);
  Future<List<KontragentModel>> searchKontragentyByName(String name);
  Future<List<KontragentModel>> searchKontragentyByEdrpou(String edrpou);
  Future<List<KontragentModel>>
  getRootFolders(); // Returns both folders and kontragenty with no parent
  Future<List<KontragentModel>> getChildren(String parentGuid);
  Future<void> insertKontragenty(List<KontragentModel> kontragenty);
  Future<void> clearAllKontragenty();
  Future<int> getKontragentyCount();
  Future<void> updateKontragent(KontragentModel kontragent);
  Future<void> deleteKontragent(String guid);
  Future<Map<String, dynamic>> debugDatabase();
  Future<void> recreateDatabase();
}

/// –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞ –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ SQLite
class SqliteKontragentDatasourceImpl
    implements SqliteKontragentDatasource, KontragentLocalDataSource {
  static Database? _database;

  String get _tableName {
    final tableName = SupabaseConfig.schema + '_kontragenty';
    print('üè∑Ô∏è –ù–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ: $tableName');
    return tableName;
  }

  Future<void> _ensureSchemaLoaded() async {
    await SupabaseConfig.loadFromPrefs();
    print('üìã –°—Ö–µ–º–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞: ${SupabaseConfig.schema}');
  }

  /// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
  Future<Database> get database async {
    if (_database != null) return _database!;
    await _ensureSchemaLoaded();
    _database = await _initDatabase();
    return _database!;
  }

  Future<Database> _initDatabase() async {
    try {
      // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ SQLite —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π
      if (!SqliteHelper.isInitialized) {
        await SqliteHelper.initialize();
      }

      final dbPath = await getDatabasesPath();
      final path = join(dbPath, 'kontragenty.db');
      print('üóÑÔ∏è –®–ª—è—Ö –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: $path');

      return await openDatabase(
        path,
        version: 3,
        onCreate: (db, version) async {
          print('üÜï –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –±–∞–∑—É –¥–∞–Ω–∏—Ö kontragenty –≤–µ—Ä—Å—ñ—ó $version');
          await _createTables(db, version);
        },
        onUpgrade: (db, oldVersion, newVersion) async {
          print(
            'üîÑ –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö kontragenty –∑ $oldVersion –¥–æ $newVersion',
          );
          // v2: migrate to schema-prefixed tables; v3: force recreate
          if (oldVersion < 2) {
            await _migrateToSchemaPrefixedTables(db);
          }
          if (oldVersion < 3) {
            await _recreateAllTables(db);
          }
        },
        onOpen: (db) async {
          print('üîì –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö kontragenty');
          // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ö–µ–º—É –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –∑–º—ñ–Ω–∏ –º—ñ–∂ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è–º–∏
          await _ensureSchemaLoaded();
          // –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
          await _ensureMainTable(db);
        },
      );
    } catch (e) {
      throw Exception('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó SQLite –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: $e');
    }
  }

  Future<void> _ensureMainTable(Database db) async {
    print('üîß –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é: $_tableName');
    await db.execute('''
      CREATE TABLE IF NOT EXISTS ${_tableName} (
        objectBoxId INTEGER PRIMARY KEY AUTOINCREMENT,
        guid TEXT NOT NULL,
        name TEXT NOT NULL,
        edrpou TEXT,
        is_folder INTEGER NOT NULL DEFAULT 0,
        parent_guid TEXT NOT NULL DEFAULT '',
        description TEXT NOT NULL DEFAULT '',
        created_at TEXT NOT NULL
      )
    ''');
    print('‚úÖ –¢–∞–±–ª–∏—Ü—è $_tableName —Å—Ç–≤–æ—Ä–µ–Ω–∞/–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞');
    await db.execute(
      'CREATE INDEX IF NOT EXISTS idx_${SupabaseConfig.schema}_guid ON ${_tableName}(guid)',
    );
    await db.execute(
      'CREATE INDEX IF NOT EXISTS idx_${SupabaseConfig.schema}_name ON ${_tableName}(name)',
    );
    await db.execute(
      'CREATE INDEX IF NOT EXISTS idx_${SupabaseConfig.schema}_edrpou ON ${_tableName}(edrpou)',
    );
    await db.execute(
      'CREATE INDEX IF NOT EXISTS idx_${SupabaseConfig.schema}_parentGuid ON ${_tableName}(parent_guid)',
    );
    await db.execute(
      'CREATE INDEX IF NOT EXISTS idx_${SupabaseConfig.schema}_isFolder ON ${_tableName}(is_folder)',
    );
  }

  Future<void> _migrateToSchemaPrefixedTables(Database db) async {
    // Create new prefixed tables if not exist and copy data from old tables
    await _createTables(db, 2);
    // Copy main table
    final oldExists = await db.rawQuery(
      "SELECT name FROM sqlite_master WHERE type='table' AND name='kontragenty'",
    );
    if (oldExists.isNotEmpty) {
      await db.execute('''
        INSERT OR IGNORE INTO ${_tableName} (objectBoxId,guid,name,edrpou,is_folder,parent_guid,description,created_at)
        SELECT objectBoxId,guid,name,edrpou,is_folder,parent_guid,description,created_at FROM kontragenty
      ''');
    }
  }

  Future<void> _recreateAllTables(Database db) async {
    // Drop all old tables (both prefixed and non-prefixed)
    final tables = await db.rawQuery(
      "SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'",
    );

    for (final table in tables) {
      final tableName = table['name'] as String;
      await db.execute('DROP TABLE IF EXISTS $tableName');
    }

    // Recreate all tables with correct schema
    await _createTables(db, 3);
  }

  Future<void> _createTables(Database db, int version) async {
    await _ensureMainTable(db);
  }

  Future<bool> _checkTableExists(Database db) async {
    try {
      final result = await db.rawQuery(
        "SELECT name FROM sqlite_master WHERE type='table' AND name=?",
        [_tableName],
      );
      final exists = result.isNotEmpty;
      print('üîç –¢–∞–±–ª–∏—Ü—è $_tableName —ñ—Å–Ω—É—î: $exists');
      return exists;
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ: $e');
      return false;
    }
  }

  @override
  Future<List<KontragentModel>> getAllKontragenty() async {
    try {
      await _ensureSchemaLoaded();
      print('üîç –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ñ–≤ –∑ SQLite...');

      final db = await database;
      final List<Map<String, dynamic>> maps = await db.query(_tableName);

      print('üìä SQLite –∑–∞–ø–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ:');
      print('   - –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Å—ñ–≤: ${maps.length}');

      if (maps.isNotEmpty) {
        print(
          '   - –ü–µ—Ä—à–∏–π –∑–∞–ø–∏—Å: ${maps.first['name']} (${maps.first['guid']})',
        );
        if (maps.length > 1) {
          print('   - –î—Ä—É–≥–∏–π –∑–∞–ø–∏—Å: ${maps[1]['name']} (${maps[1]['guid']})');
        }
        if (maps.length > 2) {
          print('   - –¢—Ä–µ—Ç—ñ–π –∑–∞–ø–∏—Å: ${maps[2]['name']} (${maps[2]['guid']})');
        }
      }

      final models = maps.map((map) => _mapToModel(map)).toList();

      print('‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ ${models.length} –∑–∞–ø–∏—Å—ñ–≤ –∑ SQLite');

      return models;
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑ SQLite: $e');
      throw Exception('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ñ–≤ –∑ –ª–æ–∫–∞–ª—å–Ω–æ—ó –ë–î: $e');
    }
  }

  @override
  Future<KontragentModel?> getKontragentByGuid(String guid) async {
    try {
      await _ensureSchemaLoaded();
      final db = await database;
      final List<Map<String, dynamic>> maps = await db.query(
        _tableName,
        where: 'guid = ?',
        whereArgs: [guid],
        limit: 1,
      );

      if (maps.isEmpty) return null;
      return _mapToModel(maps.first);
    } catch (e) {
      throw Exception(
        '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –∑–∞ GUID –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –ë–î: $e',
      );
    }
  }

  @override
  Future<List<KontragentModel>> searchKontragentyByName(String name) async {
    try {
      await _ensureSchemaLoaded();
      final db = await database;
      final List<Map<String, dynamic>> maps = await db.query(
        _tableName,
        where: 'name LIKE ?',
        whereArgs: ['%$name%'],
        orderBy: 'name',
        limit: 100,
      );

      return maps.map((map) => _mapToModel(map)).toList();
    } catch (e) {
      throw Exception(
        '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ñ–≤ –∑–∞ –Ω–∞–∑–≤–æ—é –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –ë–î: $e',
      );
    }
  }

  @override
  Future<List<KontragentModel>> searchKontragentyByEdrpou(String edrpou) async {
    try {
      await _ensureSchemaLoaded();
      final db = await database;
      final List<Map<String, dynamic>> maps = await db.query(
        _tableName,
        where: 'edrpou LIKE ?',
        whereArgs: ['%$edrpou%'],
        orderBy: 'name',
        limit: 100,
      );

      return maps.map((map) => _mapToModel(map)).toList();
    } catch (e) {
      throw Exception(
        '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ñ–≤ –∑–∞ –Ñ–î–†–ü–û–£ –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –ë–î: $e',
      );
    }
  }

  @override
  Future<List<KontragentModel>> getRootFolders() async {
    try {
      await _ensureSchemaLoaded();
      final db = await database;

      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–∞–ø–∫–∏ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è (is_folder = 1 AND parent_guid = '00000000-0000-0000-0000-000000000000')
      final List<Map<String, dynamic>> folderMaps = await db.query(
        _tableName,
        where: 'is_folder = ? AND parent_guid = ?',
        whereArgs: [1, '00000000-0000-0000-0000-000000000000'],
        orderBy: 'name',
      );

      // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ñ–≤ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è (is_folder = 0 AND parent_guid = '00000000-0000-0000-0000-000000000000')
      final List<Map<String, dynamic>> kontragentMaps = await db.query(
        _tableName,
        where: 'is_folder = ? AND parent_guid = ?',

        whereArgs: [0, ''],
        orderBy: 'name',
      );

      // –û–±'—î–¥–Ω—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏: —Å–ø–æ—á–∞—Ç–∫—É –ø–∞–ø–∫–∏, –ø–æ—Ç—ñ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∏
      final List<Map<String, dynamic>> allMaps = [
        ...folderMaps,
        ...kontragentMaps,
      ];

      print('üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ ${folderMaps.length} –ø–∞–ø–æ–∫ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è');
      print(
        'üë• –ó–Ω–∞–π–¥–µ–Ω–æ ${kontragentMaps.length} –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ñ–≤ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è',
      );
      print('üìä –í—Å—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è: ${allMaps.length}');

      final models = allMaps.map((map) => _mapToModel(map)).toList();

      // –í–∏–≤–æ–¥–∏–º–æ –ø–µ—Ä—à—ñ —Ç—Ä–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      print('üîç –ü–µ—Ä—à—ñ —Ç—Ä–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è:');
      for (int i = 0; i < models.length && i < 3; i++) {
        final model = models[i];
        print('  [${i + 1}] ${model.isFolder ? "üìÅ" : "üë§"} ${model.name}');
        print('      - GUID: ${model.guid}');
        print('      - isFolder: ${model.isFolder}');
        print('      - parentGuid: ${model.parentGuid}');
        if (!model.isFolder) {
          print('      - EDRPOU: ${model.edrpou}');
          print('      - Description: ${model.description}');
        }
      }

      return models;
    } catch (e) {
      throw Exception(
        '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ—Ä–µ–Ω–µ–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –ë–î: $e',
      );
    }
  }

  @override
  Future<List<KontragentModel>> getChildren(String parentGuid) async {
    try {
      await _ensureSchemaLoaded();
      final db = await database;
      final List<Map<String, dynamic>> maps = await db.query(
        _tableName,
        where: 'parent_guid = ?',
        whereArgs: [parentGuid],
        orderBy: 'name',
      );

      return maps.map((map) => _mapToModel(map)).toList();
    } catch (e) {
      throw Exception(
        '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–æ—á—ñ—Ä–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –ë–î: $e',
      );
    }
  }

  @override
  Future<void> insertKontragenty(List<KontragentModel> kontragenty) async {
    try {
      await _ensureSchemaLoaded();
      print(
        'üíæ –ü–æ—á–∏–Ω–∞—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ${kontragenty.length} –∑–∞–ø–∏—Å—ñ–≤ –≤ SQLite...',
      );

      final db = await database;

      // Ensure table exists before inserting
      await _ensureMainTable(db);

      // Verify table exists
      final tableExists = await _checkTableExists(db);
      if (!tableExists) {
        throw Exception('–¢–∞–±–ª–∏—Ü—è $_tableName –Ω–µ —ñ—Å–Ω—É—î –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è');
      }

      final batch = db.batch();

      for (int i = 0; i < kontragenty.length; i++) {
        final kontragent = kontragenty[i];
        final map = _modelToMap(kontragent);

        if (i < 3) {
          print('üìù –ó–∞–ø–∏—Å ${i + 1}: ${kontragent.name} (${kontragent.guid})');
        }

        batch.insert(
          _tableName,
          map,
          conflictAlgorithm: ConflictAlgorithm.ignore,
        );
      }

      print('üöÄ –í–∏–∫–æ–Ω—É—î–º–æ batch commit –¥–ª—è ${kontragenty.length} –∑–∞–ø–∏—Å—ñ–≤...');
      await batch.commit(noResult: true);

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∑–∞–ø–∏—Å–∞–ª–æ—Å—è
      final count = await getKontragentyCount();
      print('‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–∞–ø–∏—Å—ñ–≤: $count');
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ SQLite: $e');
      throw Exception('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ñ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω—É –ë–î: $e');
    }
  }

  @override
  Future<void> clearAllKontragenty() async {
    try {
      await _ensureSchemaLoaded();
      print('üóëÔ∏è –û—á–∏—â—É—î–º–æ –≤—Å—ñ—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ñ–≤ –∑ SQLite...');

      final db = await database;

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç–∞–±–ª–∏—Ü—è
      final tableExists = await _checkTableExists(db);
      if (!tableExists) {
        print('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—è $_tableName –Ω–µ —ñ—Å–Ω—É—î, –Ω–µ–º–∞—î —â–æ –æ—á–∏—â–∞—Ç–∏');
        return;
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ –¥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
      final countBefore = await getKontragentyCount();
      print('üìä –ó–∞–ø–∏—Å—ñ–≤ –¥–æ –æ—á–∏—â–µ–Ω–Ω—è: $countBefore');

      final deleted = await db.delete(_tableName);

      print('‚úÖ –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤: $deleted');

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
      final countAfter = await getKontragentyCount();
      print('üìä –ó–∞–ø–∏—Å—ñ–≤ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è: $countAfter');
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è SQLite: $e');
      throw Exception('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ñ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –ë–î: $e');
    }
  }

  @override
  Future<void> clearAllData() async {
    return clearAllKontragenty();
  }

  @override
  Future<List<KontragentModel>> searchByName(String query) async {
    return searchKontragentyByName(query);
  }

  @override
  Future<List<KontragentModel>> searchByEdrpou(String query) async {
    return searchKontragentyByEdrpou(query);
  }

  @override
  Future<int> getKontragentyCount() async {
    try {
      await _ensureSchemaLoaded();
      final db = await database;

      // Ensure table exists before counting
      await _ensureMainTable(db);

      final result = await db.rawQuery(
        'SELECT COUNT(*) as count FROM ${_tableName}',
      );
      return Sqflite.firstIntValue(result) ?? 0;
    } catch (e) {
      throw Exception('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ñ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –ë–î: $e');
    }
  }

  @override
  Future<void> updateKontragent(KontragentModel kontragent) async {
    try {
      await _ensureSchemaLoaded();
      final db = await database;
      await db.update(
        _tableName,
        _modelToMap(kontragent),
        where: 'guid = ?',
        whereArgs: [kontragent.guid],
      );
    } catch (e) {
      throw Exception('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –ë–î: $e');
    }
  }

  @override
  Future<void> deleteKontragent(String guid) async {
    try {
      await _ensureSchemaLoaded();
      final db = await database;
      await db.delete(_tableName, where: 'guid = ?', whereArgs: [guid]);
    } catch (e) {
      throw Exception('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –∑ –ª–æ–∫–∞–ª—å–Ω–æ—ó –ë–î: $e');
    }
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è Map –≤ KontragentModel
  KontragentModel _mapToModel(Map<String, dynamic> map) {
    return KontragentModel(
      guid: map['guid'] ?? '',
      name: map['name'] ?? '',
      edrpou: map['edrpou'] ?? '',
      isFolder: (map['is_folder'] ?? 0) == 1,
      parentGuid: map['parent_guid'] ?? '',
      description: map['description'] ?? '',
      createdAt: DateTime.parse(map['created_at'] as String),
    );
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è KontragentModel –≤ Map
  Map<String, dynamic> _modelToMap(KontragentModel model) {
    return {
      'guid': model.guid,
      'name': model.name,
      'edrpou': model.edrpou,
      'is_folder': model.isFolder ? 1 : 0,
      'parent_guid': model.parentGuid,
      'description': model.description,
      'created_at': model.createdAt.toIso8601String(),
    };
  }

  @override
  Future<Map<String, dynamic>> debugDatabase() async {
    try {
      print('üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ SQLite –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...');

      final db = await database;

      // –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
      final countResult = await db.rawQuery(
        'SELECT COUNT(*) as count FROM ${_tableName}',
      );
      final totalCount = Sqflite.firstIntValue(countResult) ?? 0;

      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä—à—ñ 5 –∑–∞–ø–∏—Å—ñ–≤ (raw SQL)
      final rawRecords = await db.rawQuery(
        'SELECT * FROM ${_tableName} LIMIT 5',
      );

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ
      final tableInfo = await db.rawQuery('PRAGMA table_info(${_tableName})');

      final result = {
        'total_count': totalCount,
        'table_structure': tableInfo,
        'sample_records_raw': rawRecords,
        'table_name': _tableName,
        'debug_time': DateTime.now().toIso8601String(),
      };

      print('üìä –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ SQLite:');
      print('   - –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: $totalCount');
      print(
        '   - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ: ${tableInfo.map((col) => col['name']).toList()}',
      );
      print('   - –ü–µ—Ä—à—ñ –∑–∞–ø–∏—Å–∏: ${rawRecords.take(2).toList()}');

      return result;
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ SQLite: $e');
      return {
        'error': e.toString(),
        'debug_time': DateTime.now().toIso8601String(),
      };
    }
  }

  @override
  Future<void> recreateDatabase() async {
    try {
      print('üîÑ –ü–µ—Ä–µ—Å—Ç–≤–æ—Ä—é—î–º–æ SQLite –±–∞–∑—É –¥–∞–Ω–∏—Ö...');

      // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –±–∞–∑—É
      if (_database != null) {
        await _database!.close();
        _database = null;
      }

      // –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª –±–∞–∑–∏
      final dbPath = await getDatabasesPath();
      final path = join(dbPath, 'kontragenty.db');
      await deleteDatabase(path);

      print('‚úÖ –°—Ç–∞—Ä–∞ –±–∞–∑–∞ –≤–∏–¥–∞–ª–µ–Ω–∞. –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É...');

      // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –±–∞–∑—É (—Ü–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∫–ª–∏—á–µ _createTables)
      _database = await _initDatabase();

      print('‚úÖ –ù–æ–≤–∞ –±–∞–∑–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏: $e');
      throw Exception('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è SQLite –±–∞–∑–∏: $e');
    }
  }
}
