import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:project_odata/core/config/supabase_config.dart';
import '../../models/kontragent_model.dart';
import '../kontragent_remote_data_source.dart';

/// Supabase implementation of remote data source for kontragent
class SupabaseKontragentDatasourceImpl implements KontragentRemoteDataSource {
  final SupabaseClient _supabaseClient;

  SupabaseKontragentDatasourceImpl(this._supabaseClient);

  @override
  Future<List<KontragentModel>> getAllKontragenty() async {
    try {
      print('üåê –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ñ–≤ –∑ Supabase...');

      final List<KontragentModel> allModels = [];
      const int batchSize = 1000;
      int lastId = 0; // –∫—É—Ä—Å–æ—Ä –ø–æ –∫–æ–ª–æ–Ω—Ü—ñ id
      int page = 1;

      while (true) {
        print('üì¶ –ü–∞–∫–µ—Ç $page (id > $lastId, limit: $batchSize)');

        final response = await _supabaseClient
            .schema(SupabaseConfig.schema)
            .from('kontragenty')
            .select('*')
            .gt('id', lastId)
            .order('id', ascending: true)
            .limit(batchSize);

        final rows = response as List;
        if (rows.isEmpty) break;

        for (final row in rows) {
          final map = row as Map<String, dynamic>;
          final idValue = map['id'];
          if (idValue is int) {
            lastId = idValue;
          } else if (idValue is num) {
            lastId = idValue.toInt();
          }
          allModels.add(KontragentModel.fromJson(map));
        }

        print('üìä –ü–∞–∫–µ—Ç $page: ${rows.length} –∑–∞–ø–∏—Å—ñ–≤ (lastId=$lastId)');
        if (rows.length < batchSize) break; // –æ—Å—Ç–∞–Ω–Ω—ñ–π –Ω–µ–ø–æ–≤–Ω–∏–π –ø–∞–∫–µ—Ç
        page += 1;
      }

      print('‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${allModels.length} –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ñ–≤ –∑ Supabase');
      return allModels;
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ Supabase: $e');
      throw Exception('Failed to fetch kontragenty from Supabase: $e');
    }
  }
}
