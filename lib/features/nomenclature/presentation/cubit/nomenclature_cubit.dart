import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:project_odata/objectbox.dart';
import '../../domain/usecases/get_local_nomenclature_usecase.dart';
import '../../domain/usecases/get_nomenclature_count_usecase.dart';
import '../../domain/usecases/search_nomenclature_by_article_usecase.dart';
import '../../domain/usecases/search_nomenclature_by_name_usecase.dart';
import '../../domain/usecases/search_nomenclature_by_barcode_usecase.dart';
import '../../domain/usecases/sync_nomenclature_usecase.dart';
import '../../../../core/usecases/usecase.dart';
import '../../../../core/injection/injection_container.dart';
import '../../domain/repositories/nomenclature_repository.dart';
import '../../data/datasources/remote/supabase_nomenclature_datasource.dart';
import '../../data/datasources/local/objectbox_nomenclature_datasource.dart';
import 'nomenclature_state.dart';
import '../../data/datasources/local/nomenclature_local_datasource.dart';
import '../../../../core/objectbox/objectbox_entities.dart';
import '../../domain/entities/nomenclature_entity.dart';
import '../../../common/widgets/search_mode_switch.dart';

/// Cubit –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–∞–Ω–æ–º –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏
/// –î–æ—Ç—Ä–∏–º—É—î—Ç—å—Å—è –ø—Ä–∏–Ω—Ü–∏–ø—É Single Responsibility (SOLID)
class NomenclatureCubit extends Cubit<NomenclatureState> {
  final SyncNomenclatureUseCase _syncNomenclatureUseCase;
  final GetLocalNomenclatureUseCase _getLocalNomenclatureUseCase;
  final SearchNomenclatureByNameUseCase _searchNomenclatureByNameUseCase;
  final SearchNomenclatureByArticleUseCase _searchNomenclatureByArticleUseCase;
  final GetNomenclatureCountUseCase _getNomenclatureCountUseCase;
  final SearchNomenclatureByBarcodeUseCase _searchNomenclatureByBarcodeUseCase;

  static const String rootGuid = '00000000-0000-0000-0000-000000000000';

  // In-memory tree cache
  final Map<String, List<NomenclatureEntity>> _childrenByParentGuid = {};
  ObjectBox? _obx;

  // Fast in-memory caches
  final Map<String, List<BarcodeEntity>> _barcodesByNomGuid = {};
  final Map<String, List<PriceEntity>> _pricesByNomGuid = {};
  final Map<String, List<NomenclatureObx>> _childrenByParentGuidObx = {};

  NomenclatureCubit({
    required SyncNomenclatureUseCase syncNomenclatureUseCase,
    required GetLocalNomenclatureUseCase getLocalNomenclatureUseCase,
    required SearchNomenclatureByNameUseCase searchNomenclatureByNameUseCase,
    required SearchNomenclatureByArticleUseCase
    searchNomenclatureByArticleUseCase,
    required GetNomenclatureCountUseCase getNomenclatureCountUseCase,
    required SearchNomenclatureByBarcodeUseCase
    searchNomenclatureByBarcodeUseCase,
  }) : _syncNomenclatureUseCase = syncNomenclatureUseCase,
       _getLocalNomenclatureUseCase = getLocalNomenclatureUseCase,
       _searchNomenclatureByNameUseCase = searchNomenclatureByNameUseCase,
       _searchNomenclatureByArticleUseCase = searchNomenclatureByArticleUseCase,
       _getNomenclatureCountUseCase = getNomenclatureCountUseCase,
       _searchNomenclatureByBarcodeUseCase = searchNomenclatureByBarcodeUseCase,
       super(NomenclatureState(status: NomenclatureStatus.initial));

  /// Load tree root (folders with parentGuid=root and isFolder=true)
  Future<void> loadRootTree() async {
    emit(state.copyWith(status: NomenclatureStatus.loading));

    final obx = sl<ObjectBox>();
    _obx = obx;
    final roots = obx.getRootNomenclature();
    // load all locally then filter roots
    final countResult = await _getNomenclatureCountUseCase(const NoParams());
    int totalCount = 0;
    countResult.fold((_) {}, (c) => totalCount = c);
    emit(
      NomenclatureState(
        status: NomenclatureStatus.treeLoaded,
        rootFolders: roots,
        childrenByParentGuid: Map<String, List<NomenclatureEntity>>.from(
          _childrenByParentGuid,
        ),
        totalCount: totalCount,
      ),
    );
    print(
      'üéØ NomenclatureCubit: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${roots.length} –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞',
    );

    // // –í–∏–≤–æ–¥–∏–º–æ –ø–µ—Ä—à—ñ —Ç—Ä–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    // print('üîç –ü–µ—Ä—à—ñ —Ç—Ä–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∏ –≤ Cubit:');
    // for (int i = 0; i < roots.length && i < 3; i++) {
    //   final kontragent = roots[i];
    //   print(
    //     '  [${i + 1}] ${kontragent.isFolder ? "üìÅ" : "üë§"} ${kontragent.name}',
    //   );
    //   print('      - GUID: ${kontragent.guid}');
    //   print('      - isFolder: ${kontragent.isFolder}');
    //   print('      - name: ${kontragent.name}');
    //   print('      - nameLower: ${kontragent.nameLower}');
    //   print('      - parentGuid: ${kontragent.parentGuid}');
    // }
    // load all locally then filter roots
    // final countResult = await _getNomenclatureCountUseCase(const NoParams());
    // int totalCount = 0;
    // countResult.fold((_) {}, (c) => totalCount = c);

    // final result = await _getLocalNomenclatureUseCase(const NoParams());
    // result.fold(
    //   (failure) {
    //     // Allow page to open with empty tree; UI can show failure.message
    //     _childrenByParentGuid.clear();
    //     emit(
    //       NomenclatureTreeLoaded(
    //         rootFolders: const <NomenclatureEntity>[],
    //         childrenByParentGuid: const <String, List<NomenclatureEntity>>{},
    //         totalCount: totalCount,
    //       ),
    //     );
    //   },
    //   (all) {
    //     // cache children by parent
    //     _childrenByParentGuid.clear();
    //     for (final e in all) {
    //       // Treat empty or missing parent as root
    //       final String parent = (e.parentGuid.isEmpty)
    //           ? rootGuid
    //           : e.parentGuid;
    //       final list = _childrenByParentGuid[parent] ??= <NomenclatureEntity>[];
    //       list.add(e);
    //     }
    //     // Roots are folders directly under root
    //     final roots =
    //         (_childrenByParentGuid[rootGuid] ?? <NomenclatureEntity>[])
    //             .where((e) => e.isFolder)
    //             .toList();
    //     emit(
    //       NomenclatureTreeLoaded(
    //         rootFolders: roots,
    //         childrenByParentGuid: Map<String, List<NomenclatureEntity>>.from(
    //           _childrenByParentGuid,
    //         ),
    //         totalCount: totalCount,
    //       ),
    //     );
    //   },
    // );
  }

  /// Get children for a given parent from cache (loadRootTree must be called first)
  // List<NomenclatureEntity> getChildren(String parentGuid) {
  //   return _childrenByParentGuid[parentGuid] ?? const <NomenclatureEntity>[];
  // }
  Future<List<NomenclatureObx>> loadChildren(String parentGuid) async {
    final cached = _childrenByParentGuidObx[parentGuid];
    if (cached != null) return cached;
    if (_obx == null) return const [];
    final list = _obx!.getChildrenNomenclature(parentGuid);
    _childrenByParentGuidObx[parentGuid] = list;
    return list;
  }

  /// Preload all barcodes and prices into memory (for instant UI mapping)
  Future<void> preloadBarcodesAndPrices() async {
    final obx = sl<ObjectBox>();
    // Barcodes
    final allBarcodes = obx.barcodeBox.getAll();
    _barcodesByNomGuid.clear();
    for (final b in allBarcodes) {
      final list = _barcodesByNomGuid[b.nomGuid] ??= <BarcodeEntity>[];
      list.add(BarcodeEntity(nomGuid: b.nomGuid, barcode: b.barcode));
    }
    // Prices
    final allPrices = obx.priceBox.getAll();
    _pricesByNomGuid.clear();
    for (final p in allPrices) {
      final list = _pricesByNomGuid[p.nomGuid] ??= <PriceEntity>[];
      list.add(
        PriceEntity(
          nomGuid: p.nomGuid,
          price: p.price,
          createdAt: p.createdAtMs != null
              ? DateTime.fromMillisecondsSinceEpoch(p.createdAtMs!)
              : null,
        ),
      );
    }
    // Sort each price history ascending by createdAt
    for (final e in _pricesByNomGuid.entries) {
      e.value.sort(
        (a, b) => (a.createdAt?.millisecondsSinceEpoch ?? 0).compareTo(
          b.createdAt?.millisecondsSinceEpoch ?? 0,
        ),
      );
    }
  }

  List<BarcodeEntity> getBarcodesFor(String nomGuid) =>
      _barcodesByNomGuid[nomGuid] ?? const <BarcodeEntity>[];
  List<PriceEntity> getPricesFor(String nomGuid) =>
      _pricesByNomGuid[nomGuid] ?? const <PriceEntity>[];

  /// –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –∑ —Å–µ—Ä–≤–µ—Ä–æ–º (–∑ –ø—Ä–æ–≥—Ä–µ—Å–æ–º)
  Future<void> syncNomenclature() async {
    emit(state.copyWith(status: NomenclatureStatus.loading));

    try {
      final datasource = sl<SupabaseNomenclatureDatasource>();

      // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –ø—Ä–æ–≥—Ä–µ—Å–æ–º
      final nomenclatures = await datasource.syncNomenclatureWithProgress(
        local: sl<ObjectboxNomenclatureDatasource>(),
        onProgress: (message, current, total) {
          emit(
            NomenclatureState(
              status: NomenclatureStatus.loading,
              message: message,
              current: current,
              total: total,
            ),
            //   message: message,
            //   current: current,
            //   total: total,
            // ),
          );
        },
      );

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ª–æ–∫–∞–ª—å–Ω—É –±–∞–∑—É —á–µ—Ä–µ–∑ repository
      final repository = sl<NomenclatureRepository>();

      emit(
        const NomenclatureState(
          status: NomenclatureStatus.loading,
          message: '–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ª–æ–∫–∞–ª—å–Ω—É –±–∞–∑—É...',
          current: 0,
          total: 100,
        ),
        //   message: '–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ª–æ–∫–∞–ª—å–Ω—É –±–∞–∑—É...',
        //   current: 0,
        //   total: 100,
        // ),
      );

      // –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—É –±–∞–∑—É
      await repository.clearLocalNomenclature();

      emit(
        const NomenclatureState(
          status: NomenclatureStatus.loading,
          message: '–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...',
          current: 50,
          total: 100,
        ),
      );

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤—ñ –¥–∞–Ω—ñ
      // await repository.saveLocalNomenclature(
      // nomenclatures.map((m) => m.toEntity()).toList(),
      // nomenclatures,
      // );

      emit(
        const NomenclatureState(
          status: NomenclatureStatus.loading,
          message: '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è...',
          current: 100,
          total: 100,
        ),
      );

      emit(
        NomenclatureState(
          status: NomenclatureStatus.syncSuccess,
          // syncedCount: nomenclatures.length,
        ),
      );
    } catch (e) {
      emit(
        NomenclatureState(
          status: NomenclatureStatus.error,
          errorMessage: '–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: $e',
        ),
      );
    }
  }

  /// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –∑ –ª–æ–∫–∞–ª—å–Ω–æ—ó –±–∞–∑–∏ (–ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫)
  Future<void> loadLocalNomenclature() async {
    emit(state.copyWith(status: NomenclatureStatus.loading));

    // –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤
    final countResult = await _getNomenclatureCountUseCase(const NoParams());

    int totalCount = 0;
    countResult.fold(
      (failure) => totalCount = 0,
      (count) => totalCount = count,
    );

    // –ü–æ—Ç—ñ–º –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
    final result = await _getLocalNomenclatureUseCase(const NoParams());

    result.fold(
      (failure) => emit(
        NomenclatureState(
          status: NomenclatureStatus.loaded,
          nomenclatures: const <NomenclatureEntity>[],
          totalCount: totalCount,
        ),
      ),
      (nomenclatures) => emit(
        NomenclatureState(
          status: NomenclatureStatus.loaded,
          nomenclatures: nomenclatures
              .where((e) => e.isFolder && e.parentGuid == rootGuid)
              .toList(),
          totalCount: totalCount,
        ),
      ),
    );
  }

  /// –ü–æ—à—É–∫ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –∑–∞ –Ω–∞–∑–≤–æ—é
  Future<void> searchNomenclatureByName(String name) async {
    if (name.trim().isEmpty) {
      await loadLocalNomenclature();
      return;
    }

    emit(state.copyWith(status: NomenclatureStatus.loading));

    final result = await _searchNomenclatureByNameUseCase(
      SearchNomenclatureByNameParams(name),
    );

    result.fold(
      (failure) => emit(
        NomenclatureState(
          status: NomenclatureStatus.error,
          errorMessage: failure.message,
        ),
      ),
      (nomenclatures) => emit(
        NomenclatureState(
          status: NomenclatureStatus.searchResult,
          searchResults: nomenclatures,
          searchQuery: name,
        ),
      ),
    );
  }

  /// –ü–æ—à—É–∫ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –∑–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–º
  Future<void> searchNomenclatureByArticle(String article) async {
    if (article.trim().isEmpty) {
      emit(
        const NomenclatureState(
          status: NomenclatureStatus.error,
          errorMessage: '–ê—Ä—Ç–∏–∫—É–ª –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–∏–º',
        ),
      );
      return;
    }

    emit(state.copyWith(status: NomenclatureStatus.loading));

    final result = await _searchNomenclatureByArticleUseCase(
      SearchNomenclatureByArticleParams(article),
    );

    result.fold(
      (failure) => emit(
        NomenclatureState(
          status: NomenclatureStatus.error,
          errorMessage: failure.message,
        ),
      ),
      (list) {
        if (list.isNotEmpty) {
          emit(
            NomenclatureState(
              status: NomenclatureStatus.searchResult,
              searchResults: list,
              searchQuery: article,
            ),
          );
        } else {
          emit(
            NomenclatureState(
              status: NomenclatureStatus.notFound,
              article: article,
            ),
          );
        }
      },
    );
  }

  /// –ü–æ—à—É–∫ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –∑–∞ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–º
  Future<void> searchNomenclatureByBarcode(String barcode) async {
    if (barcode.trim().isEmpty) {
      emit(
        const NomenclatureState(
          status: NomenclatureStatus.error,
          errorMessage: '–®—Ç—Ä–∏—Ö–∫–æ–¥ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–∏–º',
        ),
      );
      return;
    }

    emit(state.copyWith(status: NomenclatureStatus.loading));

    final result = await _searchNomenclatureByBarcodeUseCase(
      SearchNomenclatureByBarcodeParams(barcode),
    );

    result.fold(
      (failure) => emit(
        NomenclatureState(
          status: NomenclatureStatus.error,
          errorMessage: failure.message,
        ),
      ),
      (nomenclature) {
        if (nomenclature != null) {
          emit(
            NomenclatureState(
              status: NomenclatureStatus.searchResult,
              nomenclature: nomenclature,
              // article: barcode,
              searchBy: SearchParam.barcode,
            ),
          );
        } else {
          emit(
            NomenclatureState(
              status: NomenclatureStatus.notFound,
              searchBy: SearchParam.barcode,
            ),
          );
        }
      },
    );
  }

  /// –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ—à—É–∫ —Ç–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤—Å—ñ—î—ó –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏
  Future<void> clearSearch() async {
    await loadLocalNomenclature();
  }

  /// –û–Ω–æ–≤–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏
  Future<void> refreshCount() async {
    final result = await _getNomenclatureCountUseCase(const NoParams());

    result.fold(
      (failure) => emit(
        NomenclatureState(
          status: NomenclatureStatus.error,
          errorMessage: failure.message,
        ),
      ),
      (count) {
        emit(
          NomenclatureState(
            status: NomenclatureStatus.loaded,
            totalCount: count,
          ),
        );
      },
    );
  }

  /// –ü–µ—Ä–µ—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º)
  Future<void> recreateLocalDatabase() async {
    //todo: implement –ø–æ–≤–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
    emit(
      NomenclatureState(
        status: NomenclatureStatus.error,
        errorMessage: '–ú–µ—Ç–æ–¥ –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π',
      ),
    );
    // emit(NomenclatureLoading());

    // try {
    //   final localDatasource = sl<NomenclatureLocalDatasource>();
    //   await localDatasource.recreateDatabase();

    //   emit(
    //     NomenclatureTestSuccess({
    //       'status': 'success',
    //       'message': '–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö SQLite –ø–µ—Ä–µ—Å—Ç–≤–æ—Ä–µ–Ω–∞',
    //       'action': 'recreate_database',
    //       'time': DateTime.now().toIso8601String(),
    //     }),
    //   );
    // } catch (e) {
    //   emit(NomenclatureError('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ—ó –ë–î: $e'));
    // }
  }

  /// –ü–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—Å—Ç–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ (–±–µ–∑ –ø–µ—Ä–µ—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å)
  Future<void> clearLocalData() async {
    emit(NomenclatureState(status: NomenclatureStatus.loading));
    try {
      final repository = sl<NomenclatureRepository>();
      await repository.clearLocalNomenclature();
      emit(
        NomenclatureState(
          status: NomenclatureStatus.syncSuccess,
          testResult: {
            'status': 'success',
            'message': '–õ–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ',
            'action': 'clear_local_data',
            'time': DateTime.now().toIso8601String(),
          },
        ),
      );
    } catch (e) {
      emit(
        NomenclatureState(
          status: NomenclatureStatus.error,
          errorMessage: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ: $e',
        ),
      );
    }
  }
}
