import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import '../../models/nomenclature_model.dart';
import '../../../core/database/sqlite_helper.dart';
import '../../../core/config/supabase_config.dart';
import 'nomenclature_local_datasource.dart';

class SqliteNomenclatureDatasourceImpl implements NomenclatureLocalDatasource {
  static Database? _database;

  String get _tableName => SupabaseConfig.schema + '_nomenclature';
  String get _barcodesTable => SupabaseConfig.schema + '_barcodes';
  String get _pricesTable => SupabaseConfig.schema + '_prices';

  Future<void> _ensureSchemaLoaded() async {
    await SupabaseConfig.loadFromPrefs();
  }

  /// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
  Future<Database> get database async {
    if (_database != null) return _database!;
    await _ensureSchemaLoaded();
    _database = await _initDatabase();
    return _database!;
  }

  Future<Database> _initDatabase() async {
    try {
      // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ SQLite —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π
      if (!SqliteHelper.isInitialized) {
        await SqliteHelper.initialize();
      }

      final dbPath = await getDatabasesPath();
      final path = join(dbPath, 'nomenclature.db');

      return await openDatabase(
        path,
        version: 5,
        onCreate: _createTables,
        onUpgrade: (db, oldVersion, newVersion) async {
          // v2: add barcodes/prices; v3: migrate to schema-prefixed tables; v4: force recreate
          if (oldVersion < 2) {
            await _ensureAuxTables(db);
          }
          if (oldVersion < 3) {
            await _migrateToSchemaPrefixedTables(db);
          }
          if (oldVersion < 4) {
            await _recreateAllTables(db);
          }
          if (oldVersion < 5) {
            // Ensure new columns parentGuid, isFolder, description exist
            await _recreateAllTables(db);
          }
        },
        onOpen: (db) async {
          // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ö–µ–º—É –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –∑–º—ñ–Ω–∏ –º—ñ–∂ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è–º–∏
          await _ensureSchemaLoaded();
          // –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ –¥–æ–ø–æ–º—ñ–∂–Ω–∏—Ö
          await _ensureMainTable(db);
          await _ensureAuxTables(db);
        },
      );
    } catch (e) {
      throw Exception('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó SQLite –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: $e');
    }
  }

  Future<void> _ensureMainTable(Database db) async {
    await db.execute('''
      CREATE TABLE IF NOT EXISTS ${_tableName} (
        objectBoxId INTEGER PRIMARY KEY AUTOINCREMENT,
        id TEXT NOT NULL,
        createdAt INTEGER NOT NULL,
        name TEXT NOT NULL,
        price REAL NOT NULL,
        guid TEXT NOT NULL,
        parentGuid TEXT NOT NULL DEFAULT '',
        isFolder INTEGER NOT NULL DEFAULT 0,
        description TEXT NOT NULL DEFAULT '',
        article TEXT NOT NULL,
        unitName TEXT NOT NULL,
        unitGuid TEXT NOT NULL
      )
    ''');
    await db.execute(
      'CREATE INDEX IF NOT EXISTS idx_${SupabaseConfig.schema}_guid ON ${_tableName}(guid)',
    );
    await db.execute(
      'CREATE INDEX IF NOT EXISTS idx_${SupabaseConfig.schema}_article ON ${_tableName}(article)',
    );
    await db.execute(
      'CREATE INDEX IF NOT EXISTS idx_${SupabaseConfig.schema}_name ON ${_tableName}(name)',
    );
    await db.execute(
      'CREATE INDEX IF NOT EXISTS idx_${SupabaseConfig.schema}_parentGuid ON ${_tableName}(parentGuid)',
    );
    await db.execute(
      'CREATE INDEX IF NOT EXISTS idx_${SupabaseConfig.schema}_isFolder ON ${_tableName}(isFolder)',
    );
  }

  Future<void> _migrateToSchemaPrefixedTables(Database db) async {
    // Create new prefixed tables if not exist and copy data from old tables
    await _createTables(db, 3);
    // Copy main table
    final oldExists = await db.rawQuery(
      "SELECT name FROM sqlite_master WHERE type='table' AND name='nomenclature'",
    );
    if (oldExists.isNotEmpty) {
      await db.execute('''
        INSERT OR IGNORE INTO ${_tableName} (objectBoxId,id,createdAt,name,price,guid,article,unitName,unitGuid)
        SELECT objectBoxId,id,createdAt,name,price,guid,article,unitName,unitGuid FROM nomenclature
      ''');
    }
    // Copy barcodes
    final oldBarExists = await db.rawQuery(
      "SELECT name FROM sqlite_master WHERE type='table' AND name='barcodes'",
    );
    if (oldBarExists.isNotEmpty) {
      await db.execute('''
        INSERT OR IGNORE INTO ${_barcodesTable} (id,nom_guid,barcode)
        SELECT id,nom_guid,barcode FROM barcodes
      ''');
    }
    // Copy prices
    final oldPriceExists = await db.rawQuery(
      "SELECT name FROM sqlite_master WHERE type='table' AND name='prices'",
    );
    if (oldPriceExists.isNotEmpty) {
      await db.execute('''
        INSERT OR IGNORE INTO ${_pricesTable} (id,nom_guid,price,createdAt)
        SELECT id,nom_guid,price,createdAt FROM prices
      ''');
    }
  }

  Future<void> _recreateAllTables(Database db) async {
    // Drop all old tables (both prefixed and non-prefixed)
    final tables = await db.rawQuery(
      "SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'",
    );

    for (final table in tables) {
      final tableName = table['name'] as String;
      await db.execute('DROP TABLE IF EXISTS $tableName');
    }

    // Recreate all tables with correct schema
    await _createTables(db, 4);
  }

  Future<void> _ensureAuxTables(Database db) async {
    // –°—Ç–≤–æ—Ä—é—î–º–æ, —è–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ, —Ç–∞–±–ª–∏—Ü—ñ barcodes —Ç–∞ prices —ñ —ñ–Ω–¥–µ–∫—Å–∏
    await db.execute('''
      CREATE TABLE IF NOT EXISTS ${_barcodesTable} (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nom_guid TEXT NOT NULL,
        barcode TEXT NOT NULL
      )
    ''');
    await db.execute(
      'CREATE INDEX IF NOT EXISTS idx_${SupabaseConfig.schema}_barcodes_nom_guid ON ${_barcodesTable}(nom_guid)',
    );
    await db.execute(
      'CREATE INDEX IF NOT EXISTS idx_${SupabaseConfig.schema}_barcodes_barcode ON ${_barcodesTable}(barcode)',
    );

    await db.execute('''
      CREATE TABLE IF NOT EXISTS ${_pricesTable} (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nom_guid TEXT NOT NULL,
        price REAL NOT NULL,
        createdAt INTEGER
      )
    ''');
    await db.execute(
      'CREATE INDEX IF NOT EXISTS idx_${SupabaseConfig.schema}_prices_nom_guid ON ${_pricesTable}(nom_guid)',
    );
  }

  Future<void> _createTables(Database db, int version) async {
    await _ensureMainTable(db);

    // –¢–∞–±–ª–∏—Ü—è —à—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤
    await db.execute('''
      CREATE TABLE IF NOT EXISTS ${_barcodesTable} (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nom_guid TEXT NOT NULL,
        barcode TEXT NOT NULL
      )
    ''');
    await db.execute(
      'CREATE INDEX IF NOT EXISTS idx_${SupabaseConfig.schema}_barcodes_nom_guid ON ${_barcodesTable}(nom_guid)',
    );
    await db.execute(
      'CREATE INDEX IF NOT EXISTS idx_${SupabaseConfig.schema}_barcodes_barcode ON ${_barcodesTable}(barcode)',
    );

    // –¢–∞–±–ª–∏—Ü—è —Ü—ñ–Ω
    await db.execute('''
      CREATE TABLE IF NOT EXISTS ${_pricesTable} (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nom_guid TEXT NOT NULL,
        price REAL NOT NULL,
        createdAt INTEGER
      )
    ''');
    await db.execute(
      'CREATE INDEX IF NOT EXISTS idx_${SupabaseConfig.schema}_prices_nom_guid ON ${_pricesTable}(nom_guid)',
    );
  }

  Future<List<NomenclatureModel>> _attachRelationsToModels(
    Database db,
    List<NomenclatureModel> models,
  ) async {
    if (models.isEmpty) return models;

    final guids = models.map((m) => m.guid).toSet().toList();

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏–º–æ –±–∞—Ä–∫–æ–¥–∏ —ñ —Ü—ñ–Ω–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö GUID-—ñ–≤
    final barcodesRows = await db.query(
      _barcodesTable,
      where: 'nom_guid IN (${List.filled(guids.length, '?').join(',')})',
      whereArgs: guids,
    );
    final pricesRows = await db.query(
      _pricesTable,
      where: 'nom_guid IN (${List.filled(guids.length, '?').join(',')})',
      whereArgs: guids,
    );

    final Map<String, List<BarcodeModel>> guidToBarcodes = {};
    for (final row in barcodesRows) {
      final guid = row['nom_guid'] as String;
      final code = row['barcode'] as String;
      (guidToBarcodes[guid] ??= <BarcodeModel>[]).add(
        BarcodeModel(nomGuid: guid, barcode: code),
      );
    }

    final Map<String, List<PriceModel>> guidToPrices = {};
    for (final row in pricesRows) {
      final guid = row['nom_guid'] as String;
      final price = (row['price'] as num).toDouble();
      (guidToPrices[guid] ??= <PriceModel>[]).add(
        PriceModel(nomGuid: guid, price: price),
      );
    }

    for (final m in models) {
      m.barcodes = guidToBarcodes[m.guid] ?? <BarcodeModel>[];
      m.prices = guidToPrices[m.guid] ?? <PriceModel>[];
    }
    return models;
  }

  @override
  Future<List<NomenclatureModel>> getAllNomenclature() async {
    try {
      await _ensureSchemaLoaded();
      print('üîç –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—é –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –∑ SQLite...');

      final db = await database;
      final List<Map<String, dynamic>> maps = await db.query(_tableName);

      print('üìä SQLite –∑–∞–ø–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ:');
      print('   - –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Å—ñ–≤: ${maps.length}');

      if (maps.isNotEmpty) {
        print(
          '   - –ü–µ—Ä—à–∏–π –∑–∞–ø–∏—Å: ${maps.first['name']} (${maps.first['guid']})',
        );
        if (maps.length > 1) {
          print('   - –î—Ä—É–≥–∏–π –∑–∞–ø–∏—Å: ${maps[1]['name']} (${maps[1]['guid']})');
        }
        if (maps.length > 2) {
          print('   - –¢—Ä–µ—Ç—ñ–π –∑–∞–ø–∏—Å: ${maps[2]['name']} (${maps[2]['guid']})');
        }
      }

      // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ —ñ—Å–Ω—É—é—Ç—å
      await _ensureAuxTables(db);

      // –ü—ñ–¥—Ç—è–≥—É—î–º–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∏ —ñ —Ü—ñ–Ω–∏ –æ–¥–Ω–∏–º –ø—Ä–æ—Ö–æ–¥–æ–º
      // –í–∏—Ç—è–≥—É—î–º–æ –≤—Å—ñ —Ä—è–¥–∫–∏ –∑ barcodes/prices (–±–µ–∑ –ª—ñ–º—ñ—Ç—É)
      final barcodesRows = await db.query(_barcodesTable);
      final pricesRows = await db.query(_pricesTable);

      // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–º—ñ—Å—Ç—É –¥–æ–ø–æ–º—ñ–∂–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å
      print('üîé SQLite barcodes rows: ${barcodesRows.length}');
      if (barcodesRows.isNotEmpty) {
        print('   ‚Ä¢ –ü—Ä–∏–∫–ª–∞–¥ barcodes[0]: ${barcodesRows.first}');
      }
      print('üîé SQLite prices rows: ${pricesRows.length}');
      if (pricesRows.isNotEmpty) {
        print('   ‚Ä¢ –ü—Ä–∏–∫–ª–∞–¥ prices[0]: ${pricesRows.first}');
      }

      final Map<String, List<BarcodeModel>> guidToBarcodes = {};
      for (final row in barcodesRows) {
        final guid = row['nom_guid'] as String;
        final code = row['barcode'] as String;
        (guidToBarcodes[guid] ??= <BarcodeModel>[]).add(
          BarcodeModel(nomGuid: guid, barcode: code),
        );
      }

      final Map<String, List<PriceModel>> guidToPrices = {};
      for (final row in pricesRows) {
        final guid = row['nom_guid'] as String;
        final price = (row['price'] as num).toDouble();
        (guidToPrices[guid] ??= <PriceModel>[]).add(
          PriceModel(nomGuid: guid, price: price),
        );
      }

      print(
        'üß© –ü–æ–±—É–¥–æ–≤–∞–Ω–æ –º–∞–ø: barcodes –¥–ª—è ${guidToBarcodes.length} GUID—ñ–≤, prices –¥–ª—è ${guidToPrices.length} GUID—ñ–≤',
      );

      final models = maps.map((map) {
        final model = _mapToModel(map);
        model.barcodes = guidToBarcodes[model.guid] ?? <BarcodeModel>[];
        model.prices = guidToPrices[model.guid] ?? <PriceModel>[];
        return model;
      }).toList();

      // –î—Ä—É–∫—É—î–º–æ –ø–µ—Ä—à—ñ –∫—ñ–ª—å–∫–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑ —ó—Ö –®–ö —ñ —Ü—ñ–Ω–∞–º–∏
      for (int i = 0; i < models.length && i < 3; i++) {
        final m = models[i];
        print('üì¶ [${i + 1}] ${m.name} (${m.guid})');
        print(
          '   - –®–ö (${m.barcodes.length}): ${m.barcodes.map((e) => e.barcode).join(', ')}',
        );
        print(
          '   - –¶—ñ–Ω–∏ (${m.prices.length}): ${m.prices.map((e) => e.price).join(', ')}',
        );
      }
      print('‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ ${models.length} –∑–∞–ø–∏—Å—ñ–≤ –∑ SQLite');

      return models;
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑ SQLite: $e');
      throw Exception('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –∑ –ª–æ–∫–∞–ª—å–Ω–æ—ó –ë–î: $e');
    }
  }

  @override
  Future<NomenclatureModel?> getNomenclatureByGuid(String guid) async {
    try {
      await _ensureSchemaLoaded();
      final db = await database;
      final List<Map<String, dynamic>> maps = await db.query(
        _tableName,
        where: 'guid = ?',
        whereArgs: [guid],
      );

      if (maps.isEmpty) return null;
      final model = _mapToModel(maps.first);
      final hydrated = await _attachRelationsToModels(db, [model]);
      return hydrated.first;
    } catch (e) {
      throw Exception(
        '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –∑–∞ GUID –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –ë–î: $e',
      );
    }
  }

  @override
  Future<List<NomenclatureModel>> getNomenclatureByArticle(
    String article,
  ) async {
    try {
      await _ensureSchemaLoaded();
      final db = await database;
      final List<Map<String, dynamic>> maps = await db.query(
        _tableName,
        where: 'article LIKE ?',
        whereArgs: ['$article%'],
      );

      if (maps.isEmpty) return [];

      final models = maps.map(_mapToModel).toList();
      final hydrated = await _attachRelationsToModels(db, models);
      return hydrated;
    } catch (e) {
      throw Exception(
        '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –∑–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –ë–î: $e',
      );
    }
  }

  Future<List<NomenclatureModel>> searchNomenclatureByArticleLike(
    String article, {
    int limit = 100,
  }) async {
    try {
      await _ensureSchemaLoaded();
      final db = await database;
      final List<Map<String, dynamic>> maps = await db.query(
        _tableName,
        where: 'article LIKE ?',
        whereArgs: ['%$article%'],
        orderBy: 'name ASC',
        limit: limit,
      );
      if (maps.isEmpty) return const [];
      final models = maps.map((e) => _mapToModel(e)).toList();
      final hydrated = await _attachRelationsToModels(db, models);
      return hydrated;
    } catch (e) {
      throw Exception(
        '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –∑–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–º (LIKE) –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –ë–î: $e',
      );
    }
  }

  @override
  Future<NomenclatureModel?> getNomenclatureByBarcode(String barcode) async {
    try {
      await _ensureSchemaLoaded();
      final db = await database;
      // –ó–Ω–∞–π–¥–µ–º–æ GUID –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É
      final rows = await db.query(
        _barcodesTable,
        columns: ['nom_guid'],
        where: 'barcode = ?',
        whereArgs: [barcode],
      );
      if (rows.isEmpty) return null;
      final guid = rows.first['nom_guid'] as String;
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É
      return await getNomenclatureByGuid(guid);
    } catch (e) {
      throw Exception(
        '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –∑–∞ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –ë–î: $e',
      );
    }
  }

  @override
  Future<List<NomenclatureModel>> searchNomenclatureByName(String name) async {
    try {
      await _ensureSchemaLoaded();
      final db = await database;
      final List<Map<String, dynamic>> maps = await db.query(
        _tableName,
        where: 'name LIKE ?',
        whereArgs: ['%$name%'],
        orderBy: 'name',
        limit: 100,
      );

      final models = maps.map((map) => _mapToModel(map)).toList();
      await _attachRelationsToModels(db, models);
      return models;
    } catch (e) {
      throw Exception(
        '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –∑–∞ –Ω–∞–∑–≤–æ—é –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –ë–î: $e',
      );
    }
  }

  @override
  Future<void> insertNomenclature(List<NomenclatureModel> nomenclatures) async {
    try {
      await _ensureSchemaLoaded();
      print(
        'üíæ –ü–æ—á–∏–Ω–∞—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ${nomenclatures.length} –∑–∞–ø–∏—Å—ñ–≤ –≤ SQLite...',
      );

      final db = await database;
      final batch = db.batch();

      // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ —ñ—Å–Ω—É—é—Ç—å (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó)
      await _ensureAuxTables(db);

      for (int i = 0; i < nomenclatures.length; i++) {
        final nomenclature = nomenclatures[i];
        final map = _modelToMap(nomenclature);

        if (i < 3) {
          print(
            'üìù –ó–∞–ø–∏—Å ${i + 1}: ${nomenclature.name} (${nomenclature.guid})',
          );
        }

        batch.insert(
          _tableName,
          map,
          conflictAlgorithm: ConflictAlgorithm.ignore,
        );

        // –í—Å—Ç–∞–≤–ª—è—î–º–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∏
        for (final code in nomenclature.barcodes) {
          batch.insert(_barcodesTable, {
            'nom_guid': nomenclature.guid,
            'barcode': code.barcode,
          }, conflictAlgorithm: ConflictAlgorithm.ignore);
        }

        // –í—Å—Ç–∞–≤–ª—è—î–º–æ —Ü—ñ–Ω–∏
        for (final price in nomenclature.prices) {
          batch.insert(_pricesTable, {
            'nom_guid': nomenclature.guid,
            'price': price.price,
            'createdAt': DateTime.now().millisecondsSinceEpoch,
          }, conflictAlgorithm: ConflictAlgorithm.ignore);
        }
      }

      print('üöÄ –í–∏–∫–æ–Ω—É—î–º–æ batch commit –¥–ª—è ${nomenclatures.length} –∑–∞–ø–∏—Å—ñ–≤...');
      await batch.commit(noResult: true);

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∑–∞–ø–∏—Å–∞–ª–æ—Å—è
      final count = await getNomenclatureCount();
      final barcodesCount =
          Sqflite.firstIntValue(
            await db.rawQuery('SELECT COUNT(*) as c FROM ${_barcodesTable}'),
          ) ??
          0;
      final pricesCount =
          Sqflite.firstIntValue(
            await db.rawQuery('SELECT COUNT(*) as c FROM ${_pricesTable}'),
          ) ??
          0;
      print(
        '‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–∞–ø–∏—Å—ñ–≤: nomenclature=$count, barcodes=$barcodesCount, prices=$pricesCount',
      );
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ SQLite: $e');
      throw Exception('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—É –ë–î: $e');
    }
  }

  @override
  Future<void> clearAllNomenclature() async {
    try {
      await _ensureSchemaLoaded();
      print('üóëÔ∏è –û—á–∏—â—É—î–º–æ –≤—Å—é –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –∑ SQLite...');

      final db = await database;
      final deletedMain = await db.delete(_tableName);
      // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ —ñ—Å–Ω—É—é—Ç—å –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ—é
      await _ensureAuxTables(db);
      final deletedBarcodes = await db.delete(_barcodesTable);
      final deletedPrices = await db.delete(_pricesTable);

      print(
        '‚úÖ –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤: main=$deletedMain, barcodes=$deletedBarcodes, prices=$deletedPrices',
      );
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è SQLite: $e');
      throw Exception('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –ë–î: $e');
    }
  }

  @override
  Future<int> getNomenclatureCount() async {
    try {
      await _ensureSchemaLoaded();
      final db = await database;
      final result = await db.rawQuery(
        'SELECT COUNT(*) as count FROM ${_tableName}',
      );
      return Sqflite.firstIntValue(result) ?? 0;
    } catch (e) {
      throw Exception('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –ë–î: $e');
    }
  }

  @override
  Future<void> updateNomenclature(NomenclatureModel nomenclature) async {
    try {
      await _ensureSchemaLoaded();
      final db = await database;
      await db.update(
        _tableName,
        _modelToMap(nomenclature),
        where: 'guid = ?',
        whereArgs: [nomenclature.guid],
      );
    } catch (e) {
      throw Exception('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –ë–î: $e');
    }
  }

  @override
  Future<void> deleteNomenclature(String guid) async {
    try {
      await _ensureSchemaLoaded();
      final db = await database;
      await db.delete(_tableName, where: 'guid = ?', whereArgs: [guid]);
    } catch (e) {
      throw Exception('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –∑ –ª–æ–∫–∞–ª—å–Ω–æ—ó –ë–î: $e');
    }
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è Map –≤ NomenclatureModel
  NomenclatureModel _mapToModel(Map<String, dynamic> map) {
    return NomenclatureModel(
      objectBoxId: map['objectBoxId'] ?? 0,
      id: map['id'],
      createdAt: DateTime.fromMillisecondsSinceEpoch(map['createdAt']),
      name: map['name'],
      nameLower: map['name'].toString().toLowerCase(),
      price: map['price'],
      guid: map['guid'],
      parentGuid: map['parentGuid'] ?? '',
      isFolder: (map['isFolder'] ?? 0) == 1,
      description: map['description'] ?? '',
      article: map['article'],
      unitName: map['unitName'],
      unitGuid: map['unitGuid'],
    );
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è NomenclatureModel –≤ Map
  Map<String, dynamic> _modelToMap(NomenclatureModel model) {
    return {
      'id': model.id,
      'createdAt': model.createdAt.millisecondsSinceEpoch,
      'name': model.name,
      'nameLower': model.nameLower,
      'price': model.price,
      'guid': model.guid,
      'parentGuid': model.parentGuid,
      'isFolder': model.isFolder ? 1 : 0,
      'description': model.description,
      'article': model.article,
      'unitName': model.unitName,
      'unitGuid': model.unitGuid,
    };
  }

  @override
  Future<Map<String, dynamic>> debugDatabase() async {
    try {
      print('üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ SQLite –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...');

      final db = await database;

      // –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
      final countResult = await db.rawQuery(
        'SELECT COUNT(*) as count FROM ${_tableName}',
      );
      final totalCount = Sqflite.firstIntValue(countResult) ?? 0;

      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä—à—ñ 5 –∑–∞–ø–∏—Å—ñ–≤ (raw SQL)
      final rawRecords = await db.rawQuery(
        'SELECT * FROM ${_tableName} LIMIT 5',
      );

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ
      final tableInfo = await db.rawQuery('PRAGMA table_info(${_tableName})');

      final result = {
        'total_count': totalCount,
        'table_structure': tableInfo,
        'sample_records_raw': rawRecords,
        'table_name': _tableName,
        'debug_time': DateTime.now().toIso8601String(),
      };

      print('üìä –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ SQLite:');
      print('   - –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: $totalCount');
      print(
        '   - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ: ${tableInfo.map((col) => col['name']).toList()}',
      );
      print('   - –ü–µ—Ä—à—ñ –∑–∞–ø–∏—Å–∏: ${rawRecords.take(2).toList()}');

      return result;
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ SQLite: $e');
      return {
        'error': e.toString(),
        'debug_time': DateTime.now().toIso8601String(),
      };
    }
  }

  @override
  Future<void> recreateDatabase() async {
    try {
      print('üîÑ –ü–µ—Ä–µ—Å—Ç–≤–æ—Ä—é—î–º–æ SQLite –±–∞–∑—É –¥–∞–Ω–∏—Ö...');

      // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –±–∞–∑—É
      if (_database != null) {
        await _database!.close();
        _database = null;
      }

      // –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª –±–∞–∑–∏
      final dbPath = await getDatabasesPath();
      final path = join(dbPath, 'nomenclature.db');
      await deleteDatabase(path);

      print('‚úÖ –°—Ç–∞—Ä–∞ –±–∞–∑–∞ –≤–∏–¥–∞–ª–µ–Ω–∞. –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É...');

      // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –±–∞–∑—É (—Ü–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∫–ª–∏—á–µ _createTables)
      _database = await _initDatabase();

      print('‚úÖ –ù–æ–≤–∞ –±–∞–∑–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏: $e');
      throw Exception('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è SQLite –±–∞–∑–∏: $e');
    }
  }
}
